@page "/upload"
@using Cataloguify.Client.Areas.Images
@inject IImagesService ImagesService
@inject ISnackbar Snackbar
@using MudBlazor
@using Cropper.Blazor.Components
@using Cropper.Blazor.Models
@using Cropper.Blazor.Extensions

<MudPaper Class="pa-4">
    <RadzenAlert AlertStyle="AlertStyle.Danger" @bind-Visible="showError" Close="@OnAlertClose">
        @errorMessage
    </RadzenAlert>
    <MudText Typo="Typo.h5">Upload Image</MudText>
    <MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="OnFilesChanged">
        <ButtonTemplate>
            <MudButton HtmlTag="label"
                       Variant="@MudBlazor.Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.CloudUpload"
                       For="@context.Id">
                Select Image
            </MudButton>
        </ButtonTemplate>
    </MudFileUpload>

    @if (_imageData != null)
    {
        <div class="img-container">
            <CropperComponent Src="@($"data:image/png;base64,{_imageData}")" Options="@_cropperOptions" @ref="cropper" />

        </div>
        <MudButton OnClick="@ApplyCropping"
                   Variant="@MudBlazor.Variant.Filled"
                   Color="Color.Success">
            Crop and Upload
        </MudButton>
    }
</MudPaper>

<style>
    .img-container {
        max-width: 100%;
        max-height: 400px;
        overflow: hidden;
    }
    .big-img {
        max-width: 100%;
        height: auto;
    }
</style>

@code {
    private bool showError = false;
    private string errorMessage = string.Empty;

    private void OnAlertClose()
    {
        showError = false;
        errorMessage = string.Empty;
    }

    private async Task OnFilesChanged(IEnumerable<IBrowserFile> files)
    {
        const int maxAllowedSize = 10 * 1024 * 1024; // 10 MB limit
        var file = files.FirstOrDefault();
        if (file != null && file.Size <= maxAllowedSize)
        {
            var buffer = new byte[file.Size];
            try
            {
                using (var stream = file.OpenReadStream(maxAllowedSize))
                {
                    var buffer = new byte[file.Size];
                    await stream.ReadAsync(buffer, 0, buffer.Length);
                    string base64Image = Convert.ToBase64String(buffer);
                    var response = await ImagesService.UploadImageAsync(base64Image);
                    if (response.ErrorMessage == null)
                    {
                        Snackbar.Add("Image uploaded successfully!", Severity.Success);
                    }
                    else
                    {
                        showError = true;
                        errorMessage = $"Error during uploading image: {response.ErrorMessage.Message}";
                        StateHasChanged();
                    }
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Failed to read file: {ex.Message}", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("File size should not exceed 10 MB or no file selected.", Severity.Error);
        }
    }

    private async Task ApplyCropping()
    {
        try
        {
            var options = new GetCroppedCanvasOptions
            {
                Width = 256,
                Height = 256,
                ImageSmoothingQuality = ImageSmoothingQuality.High.ToEnumString()
            };

            var croppedCanvasDataURL = await cropper.GetCroppedCanvasDataURLAsync(options);
            var response = await ImagesService.UploadImageAsync(croppedCanvasDataURL);
            Snackbar.Add("Image uploaded successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
    }
}
